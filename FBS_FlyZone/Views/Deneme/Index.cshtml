@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/UserLayout.cshtml";
}




<div class="reservation-container" style="margin-top:130px;">
	<div class="reservation-header">
		<h2><i class="fas fa-plane"></i> Uçuş Rezervasyonu</h2>
	</div>

	<form action="ConfirmSeatSelection" method="post">
		<div class="reservation-steps">


			<input type="hidden" name="previousSeats" id="previousSeatsInput" />

			<input type="hidden" name="flightId"  />
			<input type="hidden" name="ReservationId" />
			<input type="hidden" name="selectedSeats" id="selectedSeatsInput" />
			<!-- Eklenen input -->
			<input type="hidden" name="reservationIds" id="reservationIdsInput"  />
			<input type="hidden" name="passengerSeats" id="passengerSeatsInput" />
			<!-- Önceki koltukları takip etmek için eklenen input -->
			<input type="hidden" name="previousSeats" id="previousSeatsInput"  />

			<div class="step active">
				<div class="step-number">1</div>
				<div class="step-title">Yolcu Bilgileri</div>
			</div>
			<div class="step">
				<div class="step-number">2</div>
				<div class="step-title">Koltuk Seçimi</div>
			</div>
			<div class="step">
				<div class="step-number">3</div>
				<div class="step-title">Ödeme</div>
			</div>
			<div class="step">
				<div class="step-number">4</div>
				<div class="step-title">Onay</div>
			</div>
		</div>
		<div class="passenger-list">
			<h3>Yolcular</h3>
			<ul id="passengerList">
				@foreach (var passenger in Model)
				{
					<li class="passenger-item" >
						
						<span class="passenger-name">ad soyad</span>
						<span class="selected-seat">Koltuk: </span>
					</li>
				}
			</ul>
		</div>
		<div class="seat-selection-container">
			<div class="airplane-cabin">
				<div class="cabin-header">
					<div class="exit-sign">ÇIKIŞ</div>
				</div>
				<div class="seats-container" id="seatsContainer">
					<!-- Koltuklar JavaScript ile dinamik olarak eklenecek -->
				</div>
			</div>
			<div class="seat-legend">
				<div class="legend-item">
					<div class="seat-available"></div>
					<span>Boş Koltuk</span>
				</div>
				<div class="legend-item">
					<div class="seat-selected"></div>
					<span>Seçilen Koltuk</span>
				</div>
				<div class="legend-item">
					<div class="seat-occupied"></div>
					<span>Dolu Koltuk</span>
				</div>
			</div>
			<button type="submit" id="submitBtn" class="btn-submit" style=" margin-top:10px" >Seçimi Onayla</button>
		</div>

		

	</form>
</div>

<style>
	.seat-selection-container {
		max-width: auto;
		padding: 3rem;
		background: linear-gradient(to right, #19232D, #3d3d3d);
		border-radius: 0px 0px 12px 12px;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
	}

	.airplane-cabin {
		background: linear-gradient(to right, #19232D, #3d3d3d);
		border-radius: 10px;
		padding: 20px;
		position: relative;
		margin-bottom: 2rem;
	}

	.cabin-header {
		text-align: center;
		margin-bottom: 20px;
	}

	.exit-sign {
		display: inline-block;
		background-color: #dcbb87;
		color: #19232D;
		padding: 5px 15px;
		border-radius: 4px;
		font-weight: bold;
		font-size: 0.9rem;
	}

	.seats-container {
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	.seat-row {
		display: flex;
		justify-content: center;
		gap: 15px;
	}

	.seat {
		width: 50px;
		height: 50px;
		border-radius: 4px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		font-weight: bold;
		transition: all 0.2s ease;
		position: relative;
	}

	.seat-available {
		background-color: #dcbb87;
		color: #19232D;
	}

	.seat-selected {
		background-color: #4CAF50;
		color: white;
	}

	.seat-occupied {
		background-color: #6d7b8c;
		color: white;
		cursor: not-allowed;
	}

	.aisle {
		width: 60px;
		background-color: transparent;
	}

	.seat:hover:not(.seat-occupied):not(.aisle) {
		transform: scale(1.05);
		box-shadow: 0 0 10px rgba(220, 187, 135, 0.7);
	}

	.seat-legend {
		display: flex;
		justify-content: center;
		gap: 20px;
		margin-top: 20px;
	}

	.legend-item {
		color: var(--light-bg);
		display: flex;
		align-items: center;
		gap: 8px;
	}

		.legend-item div {
			width: 20px;
			height: 20px;
			border-radius: 3px;
		}

	:root {
		--dark-primary: #19232D;
		--dark-secondary: #3d3d3d;
		--gold-accent: #dcbb87;
		--light-bg: #f5f2eb;
		--medium-gray: #6d7b8c;
	}

	body {
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		background-color: var( --dark-primary);
		color: var(--dark-primary);
	}

	.reservation-header {
		background: linear-gradient(to right, var( --dark-primary), var(--dark-secondary));
		color: #ffffff;
		padding: 2rem;
		text-align: center;
		border-bottom: 3px solid var(--gold-accent);
		border-radius: 12px 12px 0px 0px;
	}

		.reservation-header h2 {
			background: var(--gold-accent);
			-webkit-background-clip: text;
			background-clip: text;
			color: transparent;
			font-weight: 700;
			text-shadow: none;
			display: inline-block;
			padding: 0 15px;
		}

	.reservation-steps {
		display: flex;
		justify-content: space-between;
		padding: 1.5rem 2rem;
		background: linear-gradient(to right, var(--dark-primary), var(--dark-secondary));
		position: relative;
	}

	.step {
		position: relative;
		z-index: 1;
		text-align: center;
		flex: 1;
	}

		.step.active .step-number {
			background: var(--gold-accent);
			color: var(--dark-primary);
			transform: scale(1.1);
			box-shadow: 0 0 0 3px rgba(220, 187, 135, 0.3);
		}

	.step-number {
		width: 36px;
		height: 36px;
		border-radius: 50%;
		background: rgba(255,255,255,0.1);
		color: var(--gold-accent);
		display: inline-flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
		margin-bottom: 0.5rem;
		transition: all 0.3s ease;
		border: 2px solid var(--gold-accent);
	}

	.step-title {
		color: white;
		font-size: 0.85rem;
		font-weight: 500;
		opacity: 0.9;
	}

	.reservation-container {
		max-width: 900px;
		margin: 3rem auto;
		border-radius: 12px;
		overflow: visible;
		box-shadow: 0 15px 40px rgba(25, 35, 45, 0.15);
		background: white;
		border: 1px solid var(--gold-accent);
	}

	.btn-submit {
		background: linear-gradient(to right, var(--dark-primary), var(--dark-secondary));
		color: var(--gold-accent);
		border: none;
		padding: 1rem 2rem;
		font-weight: 600;
		letter-spacing: 1px;
		border: 2px solid var(--gold-accent);
		border-radius: 8px;
		transition: all 0.5s;
		margin-top: 1rem;
		width: 100%;
		text-transform: uppercase;
		font-size: 0.95rem;
	}

		.btn-submit:hover {
			border: 2px solid var(--medium-gray);
			transform: translateY(-2px);
			box-shadow: 0 5px 15px rgba(61, 61, 61, 0.2);
			background: linear-gradient(to right, var(--dark-secondary), var(--dark-primary));
		}

	/* Mobil görünüm dışına çıkarılan CSS sınıfları */
	.passenger-list {
		background: linear-gradient(to right, #19232D, #3d3d3d);
		padding: 20px;
		color: white;
	}

	.passenger-item {
		display: flex;
		justify-content: space-between;
		padding: 10px;
		border-bottom: 1px solid rgba(220, 187, 135, 0.3);
		cursor: pointer;
		transition: all 0.2s ease;
	}

		.passenger-item:last-child {
			border-bottom: none;
		}

		.passenger-item:hover {
			background-color: rgba(220, 187, 135, 0.1);
		}

		.passenger-item.selected {
			background-color: rgba(220, 187, 135, 0.2);
			border-left: 3px solid var(--gold-accent);
		}

	.passenger-name {
		font-weight: bold;
	}

	.selected-seat {
		color: var(--gold-accent);
	}

	@@media (max-width: 768px) {
		.reservation-steps {
			background: var(--gold-accent);
			flex-direction: column;
			gap: 15px;
			padding: 1.5rem;
		}

		.step {
			display: flex;
			align-items: center;
			gap: 10px;
			text-align: left;
		}

		.step-number {
			margin-bottom: 0;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		console.log('DOM yüklendi, koltuklar oluşturuluyor...');

		const seatsContainer = document.getElementById('seatsContainer');
		if (!seatsContainer) {
			console.error('seatsContainer elementi bulunamadı!');
			return;
		}

		const passengerList = document.getElementById('passengerList');
		if (!passengerList) {
			console.error('passengerList elementi bulunamadı!');
			return;
		}

		const totalRows = 25;
		const seatLetters = ['A', 'B', 'C', 'D'];

		let selectedSeats = {};  // Yolcu ID'sine göre seçilen koltuklar

		// Mevcut koltuk seçimlerini yükle
		loadExistingSelections();

		console.log('Dolu koltuklar:', occupiedSeats);

		// Rezervasyon bilgilerini al
		const reservationIdsInput = document.getElementById('reservationIdsInput');
		let reservationIds;

		if (!reservationIdsInput) {
			console.warn('reservationIdsInput elementi bulunamadı! Model üzerinden rezervasyon ID\'lerini alıyoruz.');
		} else {
			reservationIds = reservationIdsInput.value.split(',');
		}

		const maxSeats = reservationIds.length;

		let currentPassengerId = null;

		// Mevcut koltuk seçimlerini yükleme fonksiyonu
		function loadExistingSelections() {
			const passengerItems = document.querySelectorAll('.passenger-item');

			passengerItems.forEach(item => {
				const passengerId = item.getAttribute('data-passenger-id');
				const currentSeat = item.getAttribute('data-current-seat');

				if (currentSeat && currentSeat !== "") {
					selectedSeats[passengerId] = currentSeat;

					// Eğer bu koltuk occupiedSeats içinde yoksa, ekle
					// Bu, diğer kullanıcıların seçtiği koltukları korur
					if (!occupiedSeats.includes(currentSeat)) {
						occupiedSeats.push(currentSeat);
					}
				}
			});

			console.log('Mevcut koltuk seçimleri yüklendi:', selectedSeats);

			// Hidden input'a önceki koltukları yaz
			updatePreviousSeatsInput();
		}

		// Önceki koltukları input'a yazma fonksiyonu
		function updatePreviousSeatsInput() {
			const previousSeatsInput = document.getElementById('previousSeatsInput');
			if (previousSeatsInput) {
				const currentSeats = Object.values(selectedSeats).filter(seat => seat);
				previousSeatsInput.value = currentSeats.join(',');
				console.log('Önceki koltuklar input\'a yazıldı:', previousSeatsInput.value);
			}
		}

		// Yolcu seçme işlemi
		const passengerItems = document.querySelectorAll('.passenger-item');
		passengerItems.forEach(item => {
			item.addEventListener('click', function() {
				// Seçili yolcuyu vurgula
				passengerItems.forEach(p => p.classList.remove('selected'));
				this.classList.add('selected');

				// Aktif yolcu ID'sini al
				currentPassengerId = this.getAttribute('data-passenger-id');
				const reservationId = this.getAttribute('data-reservation-id');

				console.log('Seçilen yolcu ID:', currentPassengerId, 'Rezervasyon ID:', reservationId);

				// Bu yolcunun zaten seçili koltuğu varsa vurgula
				highlightSelectedSeat();
			});
		});

		// İlk yolcuyu otomatik seç
		if (passengerItems.length > 0) {
			passengerItems[0].click();
		}

		// Koltukları sıfırlama ve doğru şekilde vurgulama fonksiyonu
		function resetAllSeats() {
			// Tüm koltukları başlangıç durumuna getir
			document.querySelectorAll('.seat').forEach(seat => {
				const seatId = seat.getAttribute('data-seatId');
				if (occupiedSeats.includes(seatId)) {
					seat.className = 'seat seat-occupied';
				} else {
					seat.className = 'seat seat-available';
				}
			});
		}

		// Seçili koltuğu vurgulama fonksiyonu
		function highlightSelectedSeat() {
			// Önce tüm koltukları sıfırla
			resetAllSeats();

			// Her yolcunun seçtiği koltuğu vurgula
			for (const passengerId in selectedSeats) {
				const seatId = selectedSeats[passengerId];
				if (seatId) {
					const seatElement = document.querySelector(`.seat[data-seatId="${seatId}"]`);
					if (seatElement) {
						seatElement.className = 'seat seat-selected';
					}
				}
			}
		}

		// Koltukları oluştur
		console.log('Koltuklar oluşturuluyor...');
		try {
			for (let row = 1; row <= totalRows; row++) {
				const seatRow = document.createElement('div');
				seatRow.className = 'seat-row';

				for (let i = 0; i < seatLetters.length; i++) {
					const seat = document.createElement('div');
					const seatId = `${row}${seatLetters[i]}`;

					// Eğer bu koltuk seçili koltuklar arasında ise, seat-selected sınıfını ekle
					const isSelected = Object.values(selectedSeats).includes(seatId);

					if (isSelected) {
						seat.className = 'seat seat-selected';
					} else if (occupiedSeats.includes(seatId)) {
						seat.className = 'seat seat-occupied';
					} else {
						seat.className = 'seat seat-available';
					}

					seat.textContent = seatId;
					seat.setAttribute('data-seatId', seatId);

					seat.addEventListener('click', function () {
						if (seat.classList.contains('seat-occupied') && !Object.values(selectedSeats).includes(seatId)) {
							alert('Bu koltuk dolu!');
							return;
						}

						if (!currentPassengerId) {
							alert('Lütfen önce bir yolcu seçin!');
							return;
						}

						// Eğer bu koltuk başka bir yolcu tarafından seçilmişse
						const isSelectedByOther = Object.entries(selectedSeats).some(([pid, sid]) =>
							pid !== currentPassengerId && sid === seatId
						);

						if (isSelectedByOther) {
							alert('Bu koltuk başka bir yolcu tarafından seçilmiş!');
							return;
						}

						// Yeni koltuğu seç
						selectedSeats[currentPassengerId] = seatId;

						// Yolcunun seçtiği koltuğu güncelle
						const passengerItem = document.querySelector(`.passenger-item[data-passenger-id="${currentPassengerId}"]`);
						if (passengerItem) {
							const seatSpan = passengerItem.querySelector('.selected-seat');
							if (seatSpan) {
								seatSpan.textContent = `Koltuk: ${seatId}`;
							}

							// data-current-seat özelliğini güncelle
							passengerItem.setAttribute('data-current-seat', seatId);
						}

						// Koltukları vurgula
						highlightSelectedSeat();

						// Seçilen koltukları hidden input'a yaz
						updatePassengerSeatsInput();
						updatePreviousSeatsInput();

						// Otomatik olarak bir sonraki yolcuya geç (isteğe bağlı)
						selectNextPassenger();
					});

					if (i === 2) { // Koridor konumu
						const aisle = document.createElement('div');
						aisle.className = 'aisle';
						seatRow.appendChild(aisle);
					}

					seatRow.appendChild(seat);
				}
				seatsContainer.appendChild(seatRow);
			}
			console.log('Koltuklar başarıyla oluşturuldu.');

			// Sayfa yüklendiğinde seçili koltukları vurgula
			highlightSelectedSeat();
		} catch (error) {
			console.error('Koltuklar oluşturulurken hata oluştu:', error);
		}

		// Bir sonraki yolcuyu seçme fonksiyonu (isteğe bağlı)
		function selectNextPassenger() {
			if (!currentPassengerId) return;

			const currentItem = document.querySelector(`.passenger-item[data-passenger-id="${currentPassengerId}"]`);
			if (!currentItem) return;

			const nextItem = currentItem.nextElementSibling;
			if (nextItem && nextItem.classList.contains('passenger-item')) {
				nextItem.click();
			}
		}

		// Seçilen koltukları hidden input'a yazma fonksiyonu
		function updatePassengerSeatsInput() {
			const passengerSeatsData = [];

			passengerItems.forEach(item => {
				const passengerId = item.getAttribute('data-passenger-id');
				const reservationId = item.getAttribute('data-reservation-id');
				const seat = selectedSeats[passengerId] || '';

				passengerSeatsData.push({
					passengerId: passengerId,
					reservationId: reservationId,
					seatNumber: seat
				});
			});

				// Önceki koltukları input'a yazma fonksiyonu
	function updatePreviousSeatsInput() {
		const previousSeatsInput = document.getElementById('previousSeatsInput');
		if (previousSeatsInput) {
			// Modelden gelen orijinal koltukları kullan, değiştirme
			// Bu şekilde, orijinal veritabanı değerleri korunur
		}
	}

			const passengerSeatsInput = document.getElementById('passengerSeatsInput');
			if (passengerSeatsInput) {
				passengerSeatsInput.value = JSON.stringify(passengerSeatsData);
			} else {
				console.error('passengerSeatsInput elementi bulunamadı!');
			}

			const selectedSeatsInput = document.getElementById('selectedSeatsInput');
			if (selectedSeatsInput) {
				selectedSeatsInput.value = JSON.stringify(selectedSeats);
			}
		}

		// Form submit öncesi kontrol
		document.querySelector('form').addEventListener('submit', function(e) {
			const selectedSeatCount = Object.keys(selectedSeats).length;

			if (selectedSeatCount < passengerItems.length) {
				e.preventDefault();
				alert('Lütfen tüm yolcular için koltuk seçin!');
			} else {
				// Form gönderilmeden önce son kez input değerlerini güncelle
				updatePassengerSeatsInput();
				updatePreviousSeatsInput();
			}
		});
	});
</script>
